[{"name": "app.py", "content": "from datetime import date\nimport json\nimport pandas as pd\nimport requests\nfrom shiny import App, ui, render, reactive, req\nimport asyncio\nimport uuid  \n\n\n# Function to check if we're running in a browser/Shinylive environment\ndef is_pyodide_environment():\n    try:\n        import pyodide\n        return True\n    except ImportError:\n        return False\n\n# Initialize empty DataFrame for submissions\nsubmissions_df = pd.DataFrame(\n    columns=[\"RowID\", \"Timestamp\", \"BeverageType\", \"BeverageName\", \"Recommendation\", \"Reason\"]\n)\n\n# Helper function to convert first letter to uppercase\ndef str_to_sentence(text):\n    if not text:\n        return \"\"\n    return text[0].upper() + text[1:].lower()\n\n# CSS styles\ncss = \"\"\"\n    /* Base styling */\n    img.recommendation {\n        max-height: 150px; \n        width: auto; \n        object-fit: contain;\n        margin: 0 auto;\n    }\n    .green-result {color: green; font-weight: 700;}\n    .yellow-result {color: orange; font-weight: 700;}\n    .red-result {color: red; font-weight: 700;}\n    .recommendation-text {font-weight: bold; margin-top: 10px; text-align: center;}\n    \n    /* Table styling */\n    th {\n        text-align: left !important;\n        font-weight: bold !important;\n    }\n    \n      /* Delete button styling */\n    .delete-row {\n        cursor: pointer;\n    }\n    \n    .delete-row:hover {\n        opacity: 0.8;\n    }\n    \n    /* Button container */\n    .button-container {\n        display: flex;\n        gap: 8px;\n        margin-bottom: 15px;\n    }\n    \n    /* Nav styling */\n    .nav-pills {\n        margin-bottom: 20px;\n    }\n    \n    .nav-link {\n        color: #005EA2;\n        margin-left: 5px;\n    }\n    \n    .nav-pills .nav-link.active {\n        background-color: #005EA2;\n    }\n    \n    /* Guidelines images */\n    .guidelines-img {\n        width: 100%;\n        height: auto;\n        cursor: pointer;\n    }\n    \n    /* Lightbox styling */\n    .lightbox-overlay {\n        display: none;\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background-color: rgba(0,0,0,0.9);\n        z-index: 1000;\n        justify-content: center;\n        align-items: center;\n    }\n    \n    .lightbox-content {\n        max-width: 90%;\n        max-height: 90%;\n    }\n    \n    .lightbox-close {\n        position: absolute;\n        top: 15px;\n        right: 15px;\n        color: white;\n        font-size: 30px;\n        cursor: pointer;\n    }\n    \n    .clickable-image {\n        cursor: pointer;\n    }\n    \n    /* Mobile optimizations */\n    @media screen and (max-width: 768px) {\n        img.recommendation {\n            max-height: 80px;\n            max-width: 100%;\n        }\n        .recommendation-container {\n            height: auto !important;\n            max-height: none !important;\n            overflow: visible !important;\n        }\n        .table-wrapper {\n            overflow-x: auto;\n            -webkit-overflow-scrolling: touch;\n        }\n        #full_guidelines img, #snack_guidelines img {\n            width: 100%;\n        }\n    }\n    \n    /* Add some spacing for mobile */\n    @media screen and (max-width: 576px) {\n        .col-12.d-flex {\n            flex-direction: column;\n            align-items: center;\n        }\n        \n        .nav-pills {\n            margin-top: 10px;\n        }\n    }\n\"\"\"\n\n# Main app UI\napp_ui = ui.page_fluid(\n  \n   \n    # Head section with meta tags, CSS, and JS\n    ui.tags.head(\n        ui.tags.title(\"SSC Calculator\"),\n        ui.tags.meta(name=\"viewport\", content=\"width=device-width, initial-scale=1\"),\n        ui.tags.style(css),\n        ui.tags.link(rel=\"stylesheet\", href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css\"),\n        ui.tags.script(src=\"https://code.jquery.com/jquery-3.6.0.min.js\"),\n        ui.tags.script(\"\"\"\n$(document).ready(function() {\n  // Click handler for the guidelines image\n  $(document).on('click', '#full_guidelines img, #snack_guidelines img, .clickable-image', function() {\n    var imgSrc = $(this).attr('src');\n    if (!imgSrc) {\n      imgSrc = $(this).find('img').attr('src');\n    }\n    \n    if (imgSrc) {\n      $('#lightbox-img').attr('src', imgSrc);\n      $('#lightbox').css('display', 'flex');\n    }\n  });\n  \n  // Close lightbox when clicking on the X or anywhere outside the image\n  $(document).on('click', '.lightbox-close, .lightbox-overlay', function(e) {\n    if (e.target === this) {\n      $('#lightbox').css('display', 'none');\n    }\n  });\n  \n  // Prevent clicks on the image itself from closing the lightbox\n  $(document).on('click', '.lightbox-content', function(e) {\n    e.stopPropagation();\n  });\n  \n  // Handle tab navigation\n  $(document).on('click', '.nav-link', function() {\n    let target = $(this).data('value');\n    $('.tab-content').hide();\n    $('#' + target).show();\n    $('.nav-link').removeClass('active');\n    $(this).addClass('active');\n  });\n  \n  // Initialize first tab as active\n  $('.nav-link:first').addClass('active');\n  $('.tab-content:first').show();\n});\n        \"\"\")\n    ),\n    \n    # Navigation bar with pills\n    ui.tags.div(\n        {\"class\": \"container-fluid\"},\n        ui.tags.div(\n            {\"class\": \"row\"},\n            ui.tags.div(\n                {\"class\": \"col-12 d-flex justify-content-between align-items-center\"},\n                # Logo on left\n                ui.tags.div(\n                    ui.tags.img(src=\"https://raw.githubusercontent.com/brendensm/calc-test/main/www/logo_transparent_background.png\", height=\"50px\", style=\"margin-right:10px;\")\n                ),\n                # Navigation tabs on right\n                ui.tags.ul(\n                    {\"class\": \"nav nav-pills\"},\n                    ui.tags.li(\n                        {\"class\": \"nav-item\"},\n                        ui.tags.a(\"Beverages\", {\"class\": \"nav-link\", \"data-value\": \"beverages\"})\n                    ),\n                    ui.tags.li(\n                        {\"class\": \"nav-item\"},\n                        ui.tags.a(\"Snacks\", {\"class\": \"nav-link\", \"data-value\": \"snacks\"})\n                    ),\n                    ui.tags.li(\n                        {\"class\": \"nav-item\"},\n                        ui.tags.a(\"About\", {\"class\": \"nav-link\", \"data-value\": \"about\"})\n                    )\n                )\n            )\n        )\n    ),\n    \n    # Hidden element for triggering UI updates\n    ui.tags.div({\"id\": \"hidden_trigger\", \"style\": \"display: none;\"}),\n    \n    # Content sections for each tab\n    # 1. Beverages Tab\n    ui.tags.div(\n        {\"id\": \"beverages\", \"class\": \"tab-content container-fluid\"},\n        ui.tags.div(\n            {\"class\": \"row mt-3\"},\n            ui.tags.div(\n                {\"class\": \"col-12\"},\n                ui.tags.h2(\"Beverage Nutrition Calculator\")\n            )\n        ),\n        ui.tags.div(\n            {\"class\": \"row\"},\n            # Column for input form\n            ui.tags.div(\n                {\"class\": \"col-12 col-md-4 mb-3\"},\n                ui.tags.div(\n                    {\"class\": \"card\"},\n                    ui.tags.div(\n                        {\"class\": \"card-header\"},\n                        \"Input Information\"\n                    ),\n                    ui.tags.div(\n                        {\"class\": \"card-body\"},\n                        ui.p(\n                            \"K-12 facilities should first use the \",\n                            ui.tags.a(\"USDA Smart Snacks in School Product Calculator\",\n                                      href=\"https://foodplanner.healthiergeneration.org/calculator/\"),\n                            \" to determine if a beverage is compliant with the USDA guidelines. \",\n                            \"The SSC Beverage Calculator can then be used to determine if a USDA-compliant beverage is in \",\n                            \"the green or yellow category.\"\n                        ),\n                        ui.input_select(\n                            \"beverage_type\",\n                            \"Select Beverage Type:\",\n                            choices=[\"Juice\", \"Milk\", \"Other\"]\n                        ),\n                        ui.input_text(\n                            \"beverage_name\",\n                            \"Beverage Name:\",\n                            placeholder=\"Optional\"\n                        ),\n                        ui.input_radio_buttons(\n                            \"artificial\",\n                            ui.HTML(\"Does this contain artificial sweeteners?<sup>1</sup>\"),\n                            choices={\"True\": \"Yes\", \"False\": \"No\"},\n                            inline=True\n                        ),\n                        ui.output_ui(\"dynamic_inputs\"),\n                        ui.tags.h6(\n                            ui.HTML(\"<sup>1</sup>Artificial sweeteners include acesulfame potassium, advantame, aspartame, neotame, saccharin, and sucralose. Stevia and monk fruit are not considered to be artificial sweeteners.\"),\n                            style=\"font-size:.8em; font-weight:normal;\"\n                        ),\n                        ui.hr(),\n                        ui.tags.div(\n                            {\"class\": \"button-container\"},\n                            ui.input_action_button(\"submit\", \"Submit\", class_=\"btn-primary\"),\n                            ui.input_action_button(\n                                \"save_data\", \"Save data\", \n                                class_=\"btn-success\", \n                                icon=ui.tags.i({\"class\": \"fas fa-download\"})\n                            ),\n                            \n                \n                        )\n\n                    )\n                )\n            ),\n            \n            # Column for results\n            ui.tags.div(\n                {\"class\": \"col-12 col-md-8\"},\n                \n                # Recommendation card\n                ui.tags.div(\n                    {\"class\": \"card mb-3\"},\n                    ui.tags.div(\n                        {\"class\": \"card-header\"},\n                        \"Recommendation\"\n                    ),\n                    ui.tags.div(\n                        {\"class\": \"card-body recommendation-container\", \"style\": \"max-height: 250px; overflow: hidden;\"},\n                        ui.output_ui(\"recommendation_image\"),\n                        ui.output_ui(\"recommendation_text\")\n                    )\n                ),\n                \n                # Table card\n                ui.tags.div(\n                    {\"class\": \"card\"},\n                    ui.tags.div(\n                        {\"class\": \"card-header\"},\n                        \"Submissions\"\n                    ),\n                    ui.tags.div(\n                        {\"class\": \"card-body table-wrapper\"},\n                        ui.output_ui(\"submissions_table\")\n                    )\n                )\n            )\n        )\n    ),\n    \n    # 2. Snacks Tab\n    ui.tags.div(\n        {\"id\": \"snacks\", \"class\": \"tab-content container-fluid\", \"style\": \"display: none;\"},\n        ui.tags.div(\n            {\"class\": \"row mt-3\"},\n            ui.tags.div(\n                {\"class\": \"col-12\"},\n                ui.tags.h2(\"Snack Guidelines\")\n            )\n        ),\n        ui.tags.div(\n            {\"class\": \"row\"},\n            ui.tags.div(\n                {\"class\": \"col-md-7 col-12\"},\n                ui.tags.div(\n                    {\"class\": \"card\"},\n                    ui.tags.div(\n                        {\"class\": \"card-header\"},\n                        \"Snack Guidelines\"\n                    ),\n                    ui.tags.div(\n                        {\"class\": \"card-body\"},\n                        ui.p(\n                            \"To determine if it is a green, yellow, or red category item use the \",\n                            ui.tags.a(\n                                \"USDA Smart Snacks in School Product Calculator.\",\n                                href=\"https://foodplanner.healthiergeneration.org/calculator/\"\n                            )\n                        )\n                    )\n                )\n            ),\n            ui.tags.div(\n                {\"class\": \"col-md-5 col-12\"},\n                ui.tags.div(\n                    {\"class\": \"card\"},\n                    ui.tags.div(\n                        {\"class\": \"card-body\"},\n                        ui.tags.div(\n                            {\"id\": \"snack_guidelines\", \"class\": \"clickable-image\"},\n                            ui.tags.img(\n                                src=\"https://raw.githubusercontent.com/brendensm/calc-test/main/www/snack_guidelines.png\",\n                                width=\"100%\",\n                                class_=\"guidelines-img\"\n                            )\n                        )\n                    )\n                )\n            )\n        )\n    ),\n    \n    # 3. About Tab\n    ui.tags.div(\n        {\"id\": \"about\", \"class\": \"tab-content container-fluid\", \"style\": \"display: none;\"},\n        ui.tags.div(\n            {\"class\": \"row mt-3\"},\n            ui.tags.div(\n                {\"class\": \"col-12\"},\n                ui.tags.h2(\"About\")\n            )\n        ),\n        ui.tags.div(\n            {\"class\": \"row\"},\n            ui.tags.div(\n                {\"class\": \"col-md-7 col-12\"},\n                ui.tags.div(\n                    {\"class\": \"card\"},\n                    ui.tags.div(\n                        {\"class\": \"card-header\"},\n                        \"About the Sugar Smart Coalition\"\n                    ),\n                    ui.tags.div(\n                        {\"class\": \"card-body\"},\n                        ui.p(\n                            \"The Sugar Smart Coalition (SSC) is committed to advocacy, \"\n                            \"education, equitable practice, and policy that improves \"\n                            \"healthy food and beverage options and choices. \"\n                            \"SSC's vision is to reduce added sugar consumption \"\n                            \"and its negative health impacts on our Michigan communities.\"\n                        ),\n                        ui.p(\n                            \"SSC's beverage guidelines were developed by member dietitians in the \"\n                            \"Nutrition Guidelines Committee based on standards set by the American Heart \"\n                            \"Association, ChangeLab Solutions, Healthy Eating Research, and the National \"\n                            \"Alliance for Nutrition and Activity. Using SSC's beverage guidelines, drinks \"\n                            \"fall into one of three categories:\"\n                        ),\n                        ui.tags.ul(\n                            ui.tags.li(ui.tags.strong(\"Green / Go For It\"), \" - no added sugar, artificial sweeteners, or sugar alcohol.\"),\n                            ui.tags.li(ui.tags.strong(\"Yellow / OK Sometimes\"), \" - minimal added sugar, zero-calorie or low-calorie sweeteners.\"),\n                            ui.tags.li(ui.tags.strong(\"Red / Maybe Not\"), \" - added sugar and caloric sweeteners.\")\n                        ),\n                        ui.p(\n                            \"To learn more about the Sugar Smart Coalition, or to share any feedback with us, visit our \",\n                            ui.tags.a(\"Facebook page\", href=\"https://www.facebook.com/SugarSmartCoalition\", target=\"_blank\"),\n                            \" or \",\n                            ui.tags.a(\"email us.\", href=\"mailto:sugarsmartcoalition@gmail.com\", target=\"_blank\")\n                        )\n                    )\n                )\n            ),\n            ui.tags.div(\n                {\"class\": \"col-md-5 col-12\"},\n                ui.tags.div(\n                    {\"class\": \"card\"},\n                    ui.tags.div(\n                        {\"class\": \"card-header\"},\n                        \"Full Guidelines\"\n                    ),\n                    ui.tags.div(\n                        {\"class\": \"card-body\"},\n                        ui.tags.div(\n                            {\"id\": \"full_guidelines\", \"class\": \"clickable-image\"},\n                            ui.tags.img(\n                                src=\"https://raw.githubusercontent.com/brendensm/calc-test/main/www/guidelines_full.png\",\n                                width=\"100%\",\n                                class_=\"guidelines-img\"\n                            )\n                        )\n                    )\n                )\n            )\n        )\n    ),\n    \n    # Lightbox overlay\n    ui.tags.div(\n        {\"id\": \"lightbox\", \"class\": \"lightbox-overlay\"},\n        ui.tags.div({\"class\": \"lightbox-close\"}, \"\u00d7\"),\n        ui.tags.img({\"id\": \"lightbox-img\", \"class\": \"lightbox-content\"})\n    ),\n    \n    # Hidden element for JavaScript code\n    ui.tags.div(id=\"custom_js\", style=\"display:none;\")\n)\n\ndef server(input, output, session):\n    # Store submissions in a reactive value\n    submissions = reactive.Value(submissions_df)\n    \n    # Dynamic inputs based on beverage type\n    @output\n    @render.ui\n    def dynamic_inputs():\n        beverage_type = input.beverage_type()\n        \n        if beverage_type == \"Juice\":\n            return ui.div(\n                ui.input_numeric(\"juice_serving_size\", \"Serving Size (oz):\", min=0, value=None),\n                ui.input_radio_buttons(\n                    \"is_100_percent\",\n                    \"Is this 100% Juice?\",\n                    choices={\"True\": \"Yes\", \"False\": \"No\"},\n                    inline=True\n                )\n            )\n        elif beverage_type == \"Milk\":\n            return ui.div(\n                ui.input_radio_buttons(\n                    \"is_flavored\",\n                    \"Is the milk flavored?\",\n                    choices={\"True\": \"Yes\", \"False\": \"No\"},\n                    inline=True\n                ),\n                ui.input_radio_buttons(\n                    \"is_sweetened\",\n                    \"Is the milk sweetened?\",\n                    choices={\"True\": \"Yes\", \"False\": \"No\"},\n                    inline=True\n                )\n            )\n        elif beverage_type == \"Other\":\n            return ui.div(\n                ui.input_numeric(\"total_sugar\", \"Total Sugar (grams):\", min=0, value=None),\n                ui.input_numeric(\"added_sugar\", \"Added Sugar (grams):\", min=0, value=None),\n                ui.tags.div(\n                    \"Note: Added sugar must be less than or equal to total sugar\",\n                    style=\"font-size: 0.8em; color: #666; margin-top: 5px;\"\n                )\n            )\n        else:\n            return ui.div()\n\n    # Helper function to validate inputs\n    def validate_inputs(beverage_type):\n        if beverage_type == \"Juice\":\n            juice_size = input.juice_serving_size()\n            if juice_size is None or juice_size <= 0:\n                ui.notification_show(\n                    \"Please enter a valid serving size greater than 0\",\n                    type=\"error\"\n                )\n                return False\n        elif beverage_type == \"Other\":\n            total_sugar = input.total_sugar()\n            added_sugar = input.added_sugar()\n            \n            if total_sugar is None or total_sugar < 0:\n                ui.notification_show(\n                    \"Please enter a valid total sugar amount (0 or greater)\",\n                    type=\"error\"\n                )\n                return False\n                \n            if added_sugar is None or added_sugar < 0:\n                ui.notification_show(\n                    \"Please enter a valid added sugar amount (0 or greater)\",\n                    type=\"error\"\n                )\n                return False\n                \n            if added_sugar > total_sugar:\n                ui.notification_show(\n                    \"Added sugar cannot be greater than total sugar\",\n                    type=\"error\"\n                )\n                return False\n        \n        return True\n\n    # Function to generate reasons based on inputs and criteria\n    def generate_reasons(criteria_list, reason_texts):\n        return [reason for criteria, reason in zip(criteria_list, reason_texts) if criteria]\n\n    # Store recommendation result in a reactive value\n    recommendation_result = reactive.Value(None)\n    \n    row_to_delete = reactive.Value(None)\n    \n    # Helper function for debugging recommendations\n    # def debug_recommendation_values():\n    #     # Get input values\n    #     beverage_type = input.beverage_type()\n    #     \n    #     if beverage_type == \"Other\":\n    #         total_sugar = input.total_sugar()\n    #         added_sugar = input.added_sugar()\n    #         has_artificial = input.artificial() \n    #         \n    #         # Log values and conditions\n    #         print(f\"Debug - Other beverage inputs:\")\n    #         print(f\"  total_sugar: {total_sugar} (type: {type(total_sugar)})\")\n    #         print(f\"  added_sugar: {added_sugar} (type: {type(added_sugar)})\")\n    #         print(f\"  has_artificial: {has_artificial} (type: {type(has_artificial)})\")\n    #         \n    #         # Check conditions\n    #         condition1 = total_sugar <= 12\n    #         condition2 = added_sugar == 0\n    #         condition3 = not has_artificial\n    #         \n    #         print(f\"  Condition checks:\")\n    #         print(f\"    total_sugar <= 12: {condition1}\")\n    #         print(f\"    added_sugar == 0: {condition2}\")\n    #         print(f\"    not has_artificial: {condition3}\")\n    #         print(f\"    All conditions met for GREEN: {condition1 and condition2 and condition3}\")\n    #         \n    #         return {\n    #             \"total_sugar\": total_sugar,\n    #             \"added_sugar\": added_sugar,\n    #             \"has_artificial\": has_artificial,\n    #             \"conditions_met\": condition1 and condition2 and condition3\n    #         }\n    #     \n    #     return None\n    \n    # Check environment on startup\n    @reactive.Effect\n    def check_environment():\n        # Check if we're running in a browser environment\n        pyodide_env = is_pyodide_environment()\n        print(f\"Running in Pyodide/browser environment: {pyodide_env}\")\n        \n        # Test numeric comparisons\n        test_val1 = 0\n        test_val2 = 0.0\n        print(f\"Numeric comparison test: {test_val1} == {test_val2} is {test_val1 == test_val2}\")\n        \n        # Test boolean operations\n        test_bool = \"True\" == \"True\"\n        print(f\"Boolean test: 'True' == 'True' evaluates to {test_bool}\")\n        print(f\"Boolean negation: not {test_bool} evaluates to {not test_bool}\")\n    \n    # Validate beverage input and calculate recommendation\n    @reactive.Effect\n    @reactive.event(input.submit)\n    def validate_and_store_beverage():\n        # Require beverage type\n        req(input.beverage_type())\n        \n        beverage_type = input.beverage_type()\n        \n        # Add debug logging\n        #debug_values = debug_recommendation_values()\n        #print(f\"Debug values: {debug_values}\")\n        \n        print(f\"bev_type: {beverage_type}\")\n        \n        # Validate inputs based on beverage type\n        if not validate_inputs(beverage_type):\n            return\n        \n        # Initialize variables\n        recommendation_text = \"\"\n        recommendation_color = \"\"\n        reason = None\n        text_label = \"\"\n        \n        if beverage_type == \"Milk\":\n            # Require all milk inputs\n            req(input.is_flavored(), input.is_sweetened(), input.artificial())\n            \n            is_flavored = input.is_flavored() == \"True\"\n            is_sweetened = input.is_sweetened() == \"True\"\n            has_artificial = input.artificial() == \"True\"\n            \n            criteria = [is_sweetened, is_flavored, has_artificial]\n            reasons_text = [\"milk sweetened\", \"milk flavored\", \"contains artificial sweeteners\"]\n            \n            if not any(criteria):\n                recommendation_text = \"goforit.png\"\n                recommendation_color = \"green\"\n                text_label = \"Go For It!\"\n            else:\n                recommendation_text = \"maybenot.png\"\n                recommendation_color = \"red\"\n                text_label = \"Maybe Not\"\n                \n                reasons = generate_reasons(criteria, reasons_text)\n                if reasons:\n                    reason = str_to_sentence(\", \".join(reasons))\n        \n        elif beverage_type == \"Juice\":\n            # Require juice inputs\n            req(input.juice_serving_size(), input.is_100_percent())\n            \n            juice_size = input.juice_serving_size()\n            juice_size_ok = juice_size <= 12\n            is_100_percent = input.is_100_percent() == \"True\"\n            \n            criteria = [not juice_size_ok, not is_100_percent]\n            reasons_text = [\"serving size > 12oz\", \"not 100% juice\"]\n            \n            if is_100_percent and juice_size_ok:\n                recommendation_text = \"oksometimes.png\"\n                recommendation_color = \"yellow\"\n                text_label = \"OK Sometimes\"\n            else:\n                recommendation_text = \"maybenot.png\"\n                recommendation_color = \"red\"\n                text_label = \"Maybe Not\"\n                \n                reasons = generate_reasons(criteria, reasons_text)\n                if reasons:\n                    reason = str_to_sentence(\", \".join(reasons))\n        \n        elif beverage_type == \"Other\":\n            # Require other beverage inputs\n            req(input.total_sugar())\n            \n            # Convert input values to floats\n            try:\n                total_sugar = float(input.total_sugar())\n                added_sugar = float(input.added_sugar())\n            except ValueError:\n                ui.notification_show(\n                    \"Please enter valid numeric values for total and added sugar.\",\n                    type=\"error\"\n                )\n                return\n    \n            has_artificial = input.artificial() == \"True\"\n    \n            # Debug output\n            print(f\"Other beverage values: total={total_sugar}, added={added_sugar}, artificial={has_artificial}\")\n            \n            # Check individual conditions and collect reasons\n            reasons = []\n            \n            # Check conditions for green (negated to find failures)\n            if total_sugar > 12.0:\n                reasons.append(\"Total sugar exceeds 12g\")\n            \n            if added_sugar > 0.0:\n                reasons.append(\"Contains added sugar\")\n            \n            if has_artificial:\n                reasons.append(\"Contains artificial sweeteners\")\n            \n            # Determine category based on conditions\n            if not reasons:\n                # All green conditions met\n                recommendation_text = \"goforit.png\"\n                recommendation_color = \"green\"\n                text_label = \"Go For It!\"\n                reason = \"No added sugar, low total sugar, no artificial sweeteners\"\n            elif (total_sugar <= 24.0 and added_sugar <= 12.0):\n                # Yellow conditions met\n                recommendation_text = \"oksometimes.png\"\n                recommendation_color = \"yellow\"\n                text_label = \"OK Sometimes\"\n                # Join all the reasons that prevented it from being green\n                reason = \", \".join(reasons)\n            else:\n                # Red category\n                recommendation_text = \"maybenot.png\"\n                recommendation_color = \"red\"\n                text_label = \"Maybe Not\"\n                \n                # Add specific red category reasons\n                if total_sugar > 24.0:\n                    reasons.append(\"Total sugar exceeds 24g\")\n                if added_sugar > 12.0:\n                    reasons.append(\"Added sugar exceeds 12g\")\n                \n                # Join all reasons\n                reason = \", \".join(reasons)\n        \n        # Create a new submission record\n        new_submission = pd.DataFrame({\n            \"RowID\": [str(uuid.uuid4())],  # Generate a unique ID\n            \"Timestamp\": [date.today().isoformat()],\n            \"BeverageType\": [beverage_type],\n            \"BeverageName\": [input.beverage_name()],\n            \"Recommendation\": [recommendation_color],\n            \"Reason\": [reason if reason else None]\n        })\n        \n        # Update submissions\n        current_submissions = submissions.get().copy()\n        updated_submissions = pd.concat([current_submissions, new_submission], ignore_index=True)\n        submissions.set(updated_submissions)\n        \n        # Store the result in reactive value\n        result = {\n            \"recommendation\": recommendation_text,\n            \"color\": recommendation_color,\n            \"text_label\": text_label\n        }\n        print(f\"Setting recommendation result: {result}\")\n        recommendation_result.set(result)\n    \n    # Render recommendation image\n    @output\n    @render.ui\n    def recommendation_image():\n        result = recommendation_result.get()\n        if result is None:\n            return ui.tags.div(\n                {\"style\": \"text-align: center;\"}, \n                ui.tags.p(\"Submit the form to see recommendation\", \n                          style=\"text-align: center; color: #666;\")\n            )\n        \n        # Map filenames to GitHub URLs\n        image_urls = {\n            \"goforit.png\": \"https://raw.githubusercontent.com/brendensm/calc-test/main/www/goforit.png\",\n            \"maybenot.png\": \"https://raw.githubusercontent.com/brendensm/calc-test/main/www/maybenot.png\",\n            \"oksometimes.png\": \"https://raw.githubusercontent.com/brendensm/calc-test/main/www/oksometimes.png\"\n        }\n        \n        # Get the URL for the recommendation - with debug info\n        image_url = image_urls.get(result[\"recommendation\"], \"\")\n        print(f\"Displaying image: {result['recommendation']} -> {image_url}\")\n        \n        # Return the image UI\n        return ui.tags.div(\n            {\"style\": \"text-align: center;\"},\n            ui.tags.img(src=image_url, class_=\"recommendation\")\n        )\n    \n    # Render recommendation text\n    @output\n    @render.ui\n    def recommendation_text():\n        result = recommendation_result.get()\n        if result is None:\n            return ui.tags.div()\n        \n        # Create a styled text based on the color\n        class_name = f\"{result['color']}-result\"\n        return ui.tags.p(result[\"text_label\"], class_=f\"recommendation-text {class_name}\")\n\n    # Display submissions table\n    # @output\n    # @render.ui\n    # def submissions_table():\n    #     df = submissions.get()\n    #     \n    #     if len(df) == 0:\n    #         # Create empty table with headers\n    #         columns = [\"Date\", \"Type\", \"Name\", \"Result\", \"Reason\"]\n    #         return ui.tags.table(\n    #             {\"class\": \"table table-striped\"},\n    #             ui.tags.thead(\n    #                 ui.tags.tr([ui.tags.th(col) for col in columns])\n    #             ),\n    #             ui.tags.tbody(\n    #                 ui.tags.tr(ui.tags.td(\"No data available\", colspan=5, style=\"text-align: center;\"))\n    #             )\n    #         )\n    #     else:\n    #         # Rename columns for display\n    #         display_df = df.copy().rename(columns={\n    #             \"Timestamp\": \"Date\",\n    #             \"BeverageType\": \"Type\",\n    #             \"BeverageName\": \"Name\",\n    #             \"Recommendation\": \"Result\",\n    #             \"Reason\": \"Reason\"\n    #         })\n    #         \n    #         # Get columns and data\n    #         columns = display_df.columns.tolist()\n    #         \n    #         # Create table header\n    #         thead = ui.tags.thead(\n    #             ui.tags.tr([ui.tags.th(col) for col in columns])\n    #         )\n    #         \n    #         # Create table rows\n    #         rows = []\n    #         for _, row in display_df.iterrows():\n    #             cells = []\n    #             for col in columns:\n    #                 cell_value = row[col] if not pd.isna(row[col]) else \"\"\n    #                 cells.append(ui.tags.td(str(cell_value)))\n    #             rows.append(ui.tags.tr(cells))\n    #         \n    #         # Create table body\n    #         tbody = ui.tags.tbody(rows)\n    #         \n    #         # Return complete table\n    #         return ui.tags.table(\n    #             {\"class\": \"table table-striped\"},\n    #             thead,\n    #             tbody\n    #         )\n    \n    @output\n    @render.ui\n    def submissions_table():\n        df = submissions.get()\n        \n        if len(df) == 0:\n            # Create empty table with headers\n            columns = [\"Date\", \"Type\", \"Name\", \"Result\", \"Reason\", \"Actions\"]\n            return ui.tags.table(\n                {\"class\": \"table table-striped\"},\n                ui.tags.thead(\n                    ui.tags.tr([ui.tags.th(col) for col in columns])\n                ),\n                ui.tags.tbody(\n                    ui.tags.tr(ui.tags.td(\"No data available\", colspan=6, style=\"text-align: center;\"))\n                )\n            )\n        else:\n            # Rename columns for display\n            display_df = df.copy().rename(columns={\n                \"Timestamp\": \"Date\",\n                \"BeverageType\": \"Type\",\n                \"BeverageName\": \"Name\",\n                \"Recommendation\": \"Result\",\n                \"Reason\": \"Reason\"\n            })\n            \n            # Get columns for display (exclude RowID)\n            display_columns = [col for col in display_df.columns if col != \"RowID\"]\n            \n            # Create table header (add Actions column)\n            all_columns = display_columns + [\"Actions\"]\n            thead = ui.tags.thead(\n                ui.tags.tr([ui.tags.th(col) for col in all_columns])\n            )\n            \n            # Create table rows with UUID-based delete buttons\n            rows = []\n            for idx, row_data in display_df.iterrows():\n                row_id = row_data[\"RowID\"]  # Get the unique row ID\n                \n                cells = []\n                for col in display_columns:\n                    cell_value = row_data[col] if not pd.isna(row_data[col]) else \"\"\n                    cells.append(ui.tags.td(str(cell_value)))\n                \n                # Add delete button cell with row UUID\n                delete_btn = ui.tags.button(\n                    ui.tags.i({\"class\": \"fas fa-trash\"}),\n                    {\"class\": \"btn btn-sm btn-danger delete-row\", \n                     \"type\": \"button\",\n                     \"onclick\": f\"Shiny.setInputValue('delete_row_id', '{row_id}')\"}\n                )\n                cells.append(ui.tags.td(delete_btn))\n                \n                rows.append(ui.tags.tr(cells))\n            \n            # Create table body\n            tbody = ui.tags.tbody(rows)\n            \n            # Return complete table\n            return ui.tags.table(\n                {\"class\": \"table table-striped\"},\n                thead,\n                tbody\n            )\n\n\n   # Save data to Google Sheet\n    @reactive.Effect\n    @reactive.event(input.save_data)\n    async def save_data():\n        # Show saving notification\n        ui.notification_show(\n            \"Saving data to Google Sheet...\",\n            type=\"default\",\n            duration=None,\n            id=\"saving\"\n        )\n        \n        current_data = submissions.get()\n        \n        # Check if there's data to save\n        if len(current_data) == 0:\n            ui.notification_remove(\"saving\")\n            ui.notification_show(\n                \"No data to save\",\n                type=\"warning\"\n            )\n            return\n        \n        # Convert DataFrame to JSON\n        data_json = current_data.to_json(orient=\"records\")\n        \n        # Google Apps Script URL\n        script_url = \"https://script.google.com/macros/s/AKfycby6D2dpPUHUrPSzl-mXoVWGuhpYOrORQScpEsWN8zHy_01-0NORjVRgtX0VnvAFkHkHeA/exec\"\n        \n        try:\n            # Handle the request based on environment\n            if is_pyodide_environment():\n                # For Shinylive environment (browser)\n                # Use PyJS to make a fetch with no-cors mode\n                from js import fetch, Object, JSON\n                from pyodide.ffi import to_js\n                \n                # Convert the data to JavaScript format\n                js_data = to_js(json.loads(data_json))\n                \n                # Create request options\n                options = Object.fromEntries(to_js({\n                    \"method\": \"POST\",\n                    \"headers\": {\"Content-Type\": \"application/json\"},\n                    \"body\": JSON.stringify(js_data),\n                    \"mode\": \"no-cors\"  # Add this line to use no-cors mode\n                }))\n                \n                # Use JavaScript's fetch directly\n                response = await fetch(script_url, options)\n                \n                # Since no-cors returns an opaque response, we can't check status\n                # Just assume it worked if no exception\n                ui.notification_remove(\"saving\")\n                ui.notification_show(\n                    \"Data sent to the server (no confirmation available)\",\n                    type=\"success\"\n                )\n            else:\n                # For local environment\n                response = requests.post(\n                    script_url,\n                    headers={\"Content-Type\": \"application/json\"},\n                    data=data_json\n                )\n                \n                # Remove saving notification\n                ui.notification_remove(\"saving\")\n                \n                # Check response status\n                if response.status_code == 200:\n                    ui.notification_show(\n                        \"Data saved successfully!\",\n                        type=\"success\"\n                    )\n                else:\n                    ui.notification_show(\n                        f\"Error: Server returned status {response.status_code}\",\n                        type=\"error\"\n                    )\n                \n        except Exception as e:\n            # Remove saving notification\n            ui.notification_remove(\"saving\")\n            \n            # Show error notification\n            ui.notification_show(\n                f\"Error: {str(e)}\",\n                type=\"error\"\n            )\n\n\n            \n    @reactive.Effect\n    @reactive.event(input.delete_row_id)\n    def handle_delete_row():\n        # Get the row ID to delete\n        row_id = input.delete_row_id()\n        \n        if row_id:\n            # Copy the current dataframe\n            current_data = submissions.get().copy()\n            \n            # Find the row with the matching ID\n            matching_rows = current_data[\"RowID\"] == row_id\n            \n            if matching_rows.any():\n                # Drop the row with the matching ID\n                updated_data = current_data[~matching_rows].reset_index(drop=True)\n                \n                # Update the reactive value\n                submissions.set(updated_data)\n                \n\n\n# Create app\napp = App(app_ui, server)\n", "type": "text"}]